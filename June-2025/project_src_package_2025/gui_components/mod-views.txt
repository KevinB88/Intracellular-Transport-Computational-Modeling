from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QFormLayout, QLabel, QPushButton, QComboBox, QTabWidget,
                             QTextEdit, QStackedWidget, QCheckBox)
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import Qt

# Assume all imports (like ToggleSelectListWidget, output_display_widget, parmas_config, etc.) are already defined

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        # Layouts
            self.main_layout = QHBoxLayout()
        self.setLayout(self.main_layout)

        # Left Panel
        self.left_panel = QVBoxLayout()

        self.comp_label = QLabel("Select Computation:")
        self.comp_select = QComboBox()
        self.comp_select.addItems(parmas_config.PARAMETER_SCHEMAS.keys())
        self.comp_select.currentTextChanged.connect(self.update_parameter_fields)

        self.history_dropdown = QComboBox()
        self.history_dropdown.addItem("Select Previous Computation: ")
        self.history_dropdown.currentIndexChanged.connect(self.load_history_entry)

        self.clear_hist_button = QPushButton("Clear History")
        self.clear_hist_button.clicked.connect(self.clear_history)

        self.restored_label = QLabel("")
        self.restored_label.setStyleSheet("Color: blue; font-weight: bold;")
        self.restored_label.hide()

        self.param_form = QFormLayout()
        self.param_inputs = {}

        self.advanced_toggle = QCheckBox("Show Advanced Parameters")
        self.advanced_toggle.stateChanged.connect(self.toggle_advanced_fields)
        self.advanced_widgets = []
        # self.get_line_edit()
        for line_edit in self.param_inputs.values():
            line_edit.installEventFilter(self)

        self.reset_params_button = QPushButton("Reset Parameters")
        self.reset_params_button.clicked.connect(self.clear_parameter_fields)

        self.clear_output_button = QPushButton("Clear Outputs")
        self.clear_output_button.clicked.connect(self.clear_displayed_results)

        self.button_panel = QHBoxLayout()
        self.launch_button = QPushButton("Launch")
        self.launch_button.clicked.connect(self.run_computation_mp)
        self.set_launch_color("idle")

        self.spinner_label = QLabel()
        self.spinner_label.setVisible(False)
        self.spinner_movie = QMovie("gui_components/visual_materials/gifs/spinner_100x100.gif")
        self.spinner_label.setMovie(self.spinner_movie)

        self.enqueue_button = QPushButton("+")
        self.enqueue_button.setToolTip("Add this computation to the job queue")
        self.enqueue_button.clicked.connect(self.enqueue_job)

        self.run_queue_button = QPushButton("Execute Queue")
        self.run_queue_button.setToolTip("Start running enqueued computations")
        self.run_queue_button.clicked.connect(self.run_job_queue_mp)

        self.button_panel.addWidget(self.launch_button)
        self.button_panel.addWidget(self.spinner_label)
        self.button_panel.addWidget(self.enqueue_button)
        self.button_panel.addWidget(self.run_queue_button)

        # Group: Computation
        comp_group = QGroupBox("Computation")
        comp_layout = QVBoxLayout()
        comp_layout.addWidget(self.comp_label)
        comp_layout.addWidget(self.comp_select)
        comp_group.setLayout(comp_layout)

        # Group: History
        history_group = QGroupBox("History")
        history_layout = QVBoxLayout()
        history_layout.addWidget(self.history_dropdown)
        history_layout.addWidget(self.clear_hist_button)
        history_layout.addWidget(self.restored_label)
        history_group.setLayout(history_layout)

        # Group: Parameters
        param_group = QGroupBox("Parameters")
        param_layout = QVBoxLayout()
        param_layout.addWidget(self.advanced_toggle)
        param_layout.addLayout(self.param_form)
        param_group.setLayout(param_layout)

        left_buttons = QHBoxLayout()
        left_buttons.addWidget(self.reset_params_button)
        left_buttons.addWidget(self.clear_output_button)

        self.left_panel.addWidget(comp_group)
        self.left_panel.addWidget(history_group)
        self.left_panel.addWidget(param_group)
        self.left_panel.addLayout(left_buttons)
        self.left_panel.addLayout(self.button_panel)

        # Center Panel (Tab: Results + Visualization)
        self.tab_widget = QTabWidget()
        self.result_display_tab = QWidget()
        self.visualization_tab = QWidget()
        self.result_layout = QVBoxLayout()
        self.visualization_layout = QVBoxLayout()
        self.result_display_tab.setLayout(self.result_layout)
        self.visualization_tab.setLayout(self.visualization_layout)
        self.tab_widget.addTab(self.result_display_tab, "Results")
        self.tab_widget.addTab(self.visualization_tab, "Visualization")

        self.png_preview_widget = output_display_widget.PNGPreviewWidget()
        self.png_preview_widget.hide()
        self.output_files_widget = output_display_widget.OutputFilesWidget()
        self.output_files_widget.hide()
        self.result_layout.addWidget(self.png_preview_widget)
        self.result_layout.addWidget(self.output_files_widget)

        self.visualization_area = QStackedWidget()
        self.visualization_area.setMinimumSize(600, 600)

        self.domain_checkbox_group = QGroupBox("Domain Grid Options")
        self.checkbox_layout = QVBoxLayout()
        self.display_extract_checkbox = QCheckBox("Display Extraction Region")
        self.toggle_border_checkbox = QCheckBox("Display Internal Borders")
        self.toggle_border_checkbox.setChecked(True)
        self.display_domain_button = QPushButton("Preview Domain")
        self.display_domain_button.clicked.connect(self.handle_display_domain)
        self.close_domain_button = QPushButton("Close Domain")
        self.close_domain_button.clicked.connect(self.close_domain)
        self.close_domain_button.hide()

        self.checkbox_layout.addWidget(self.display_domain_button)
        self.checkbox_layout.addWidget(self.close_domain_button)
        self.checkbox_layout.addWidget(self.display_extract_checkbox)
        self.checkbox_layout.addWidget(self.toggle_border_checkbox)
        self.domain_checkbox_group.setLayout(self.checkbox_layout)

        self.animation_controls_group = QGroupBox("Animation Controls")
        self.anim_layout = QHBoxLayout()
        self.pause_button = QPushButton("Pause")
        self.pause_button.clicked.connect(self.pause_animation)
        self.clear_ani_button = QPushButton("Clear Animation")
        self.clear_ani_button.clicked.connect(self.clear_animation)
        self.launch_animation_button = QPushButton("Launch Animation")
        self.launch_animation_button.setEnabled(False)
        self.launch_animation_button.setStyleSheet("background-color : lightgray")
        self.launch_animation_button.clicked.connect(self.handle_launch_animation)
        self.connect_QLINE_editfields()
        self.anim_layout.addWidget(self.pause_button)
        self.anim_layout.addWidget(self.clear_ani_button)
        self.anim_layout.addWidget(self.launch_animation_button)
        self.animation_controls_group.setLayout(self.anim_layout)

        self.viz_group = QGroupBox("Visualization")
        self.viz_layout = QVBoxLayout()
        self.viz_label = QLabel("Select Visualization:")
        self.viz_label.setStyleSheet("font-weight: bold;")
        self.visualization_select = QComboBox()
        self.visualization_select.addItems([ "Show Domain", "Animate Diffusion" ])
        self.visualization_select.currentTextChanged.connect(self.handle_visualization_mode_change)
        self.visualization_mode = "Show Domain"
        self.viz_layout.addWidget(self.viz_label)
        self.viz_layout.addWidget(self.visualization_select)
        self.viz_group.setLayout(self.viz_layout)

        self.visualization_layout.addWidget(self.visualization_area)
        self.visualization_layout.addWidget(self.domain_checkbox_group)
        self.visualization_layout.addWidget(self.animation_controls_group)
        self.visualization_layout.addWidget(self.viz_group)

        # Right Panel (Queue + Output)
        self.right_panel = QVBoxLayout()
        self.queue_panel = QVBoxLayout()
        self.queue_button_layout = QHBoxLayout()
        self.plot_layout = QVBoxLayout()

        self.edit_job_button = QPushButton("Edit Job")
        self.edit_job_button.clicked.connect(self.edit_selected_job)
        self.move_up_button = QPushButton("Move Up")
        self.move_up_button.clicked.connect(self.move_selected_job_up)
        self.move_down_button = QPushButton("Move Down")
        self.move_down_button.clicked.connect(self.move_selected_job_down)
        self.remove_job_button = QPushButton("Remove Job")
        self.remove_job_button.clicked.connect(self.remove_selected_job)
        self.clear_queue_button = QPushButton("Clear Queue")
        self.clear_queue_button.clicked.connect(self.clear_entire_queue)

        self.queue_list_label = QLabel("Queued Jobs:")
        self.queue_list_widget = ToggleSelectListWidget()
        self.queue_list_widget.setFixedWidth(300)
        self.queue_list_widget.itemSelectionChanged.connect(self.toggle_move_buttons_visibility)
        self.get_job_queue()

        self.queue_button_layout.addWidget(self.edit_job_button)
        self.queue_button_layout.addWidget(self.move_up_button)
        self.queue_button_layout.addWidget(self.move_down_button)
        self.queue_button_layout.addWidget(self.remove_job_button)
        self.queue_button_layout.addWidget(self.clear_queue_button)

        self.queue_panel.addWidget(self.queue_list_label)
        self.queue_panel.addWidget(self.queue_list_widget)
        self.queue_panel.addLayout(self.queue_button_layout)

        self.output_display = QTextEdit()
        self.output_display.setReadOnly(True)

        self.right_panel.addLayout(self.queue_panel)
        self.right_panel.addLayout(self.plot_layout)
        self.right_panel.addWidget(self.output_display)
        self.right_panel.addStretch()

        # Add panels to main layout
        self.main_layout.addLayout(self.left_panel, stretch=2)
        self.main_layout.addWidget(self.tab_widget, stretch=3)
        self.main_layout.addLayout(self.right_panel, stretch=2)

        # Misc
        self.setup_d_tube_live_check()
        self.toggle_move_buttons_visibility()
        self.update_queue_controls_visibility()
        self.update_history_dropdown_visibility()
        self.update_queue_execute_button_visibility()
