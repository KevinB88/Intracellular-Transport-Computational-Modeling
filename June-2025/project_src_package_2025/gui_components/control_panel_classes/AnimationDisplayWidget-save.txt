from . import (QWidget, QVBoxLayout, QPushButton, QSlider,
               QLabel, Qt, QMessageBox, QSizePolicy)
from . import FigureCanvas
from . import plt
from . import ast
from . import evo
import re


class AnimationDisplayWidget(QWidget):
    def __init__(self, param_inputs, parent=None):
        super().__init__(parent)
        self.param_inputs = param_inputs
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        # FPS slider
        self.fps_label = QLabel("Frames per Second: 50")
        self.fps_slider = QSlider(Qt.Horizontal)
        self.fps_slider.setMinimum(5)
        self.fps_slider.setMaximum(100)
        self.fps_slider.setValue(50)
        self.fps_slider.setTickInterval(5)
        self.fps_slider.setTickPosition(QSlider.TicksBelow)
        self.fps_slider.valueChanged.connect(self.update_fps_label)

        # Steps-per-frame slider
        self.steps_slider = QSlider(Qt.Horizontal)
        self.steps_slider.setMinimum(1)
        self.steps_slider.setMaximum(100)
        self.steps_slider.setValue(10)
        self.steps_slider.setTickInterval(5)
        self.steps_slider.setTickPosition(QSlider.TicksBelow)
        self.steps_slider.valueChanged.connect(self.update_slider_label)
        self.steps_label = QLabel("Steps per Frame: 10")

        # Control buttons
        self.launch_button = QPushButton("Launch Animation")
        self.launch_button.clicked.connect(self.launch_animation)

        self.pause_button = QPushButton("Pause Animation")
        self.pause_button.clicked.connect(self.pause_animation)
        self.pause_button.setVisible(False)

        self.resume_button = QPushButton("Resume Animation")
        self.resume_button.clicked.connect(self.resume_animation)
        self.resume_button.setVisible(False)

        self.clear_button = QPushButton("Clear Animation")
        self.clear_button.clicked.connect(self.clear_animation)
        self.clear_button.setVisible(False)

        # Layout
        self.layout.addWidget(self.fps_label)
        self.layout.addWidget(self.fps_slider)
        self.layout.addWidget(self.steps_slider)
        self.layout.addWidget(self.steps_label)
        self.layout.addWidget(self.launch_button)
        self.layout.addWidget(self.pause_button)
        self.layout.addWidget(self.resume_button)
        self.layout.addWidget(self.clear_button)

        self.canvas = None
        self.anim = None
        self.animation_active = False

    def update_fps_label(self):
        fps = self.fps_slider.value()
        self.fps_label.setText(f"Frames per Second: {fps}")

    def update_slider_label(self, value):
        self.steps_label.setText(f"Steps per Frame: {value}")

    def launch_animation(self):
        # self.clear_animation()
        try:
            if self.canvas is not None:
                self.clear_animation()
            plt.close('all')

            fps = self.fps_slider.value()
            steps_per_frame = self.steps_slider.value()
            K_param = 1000

            try:
                rings = int(self.param_inputs["rg_param"].text())
            except ValueError:
                QMessageBox.warning(self, "Input Error", "Please enter a valid integer for rg_param.")
                return

            try:
                rays = int(self.param_inputs["ry_param"].text())
            except ValueError:
                QMessageBox.warning(self, "Input Error", "Please enter a valid integer for ry_param.")
                return

            try:
                w_param = float(self.param_inputs["w_param"].text())
            except ValueError:
                QMessageBox.warning(self, "Input Error", "Please enter a valid float for w_param")
                return

            try:
                v_param = float(self.param_inputs["v_param"].text())
            except ValueError:
                QMessageBox.warning(self, "Input Error", "Please enter a valid float for v_param")

            N_param = self.param_inputs["N_param"].text()
            N_param = list(map(int, re.findall(r'\d+', N_param))) if N_param else []
            T_param = float(self.param_inputs["T_param"].text())
            d_tube = float(self.param_inputs["d_tube"].text())

            canvas = evo.animate_diffusion(
                rings, rays, w_param, v_param, N_param,
                K_param, T_param, d_tube,
                steps_per_frame=steps_per_frame,
                interval_ms=int(1000 / fps)
            )

            self.canvas = canvas
            self.anim = getattr(canvas, "ani", None)
            self.animation_active = True

            self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            # self.canvas.setMinimumHeight(400) # This is optional, prevents over-compression
            self.canvas.setMinimumSize(600, 400)
            self.layout.addWidget(self.canvas, alignment=Qt.AlignCenter)
            self.canvas.draw()

            self.pause_button.setVisible(True)
            self.resume_button.setVisible(False)
            self.clear_button.setVisible(True)

        except Exception as e:
            QMessageBox.critical(self, "Error", f"Animation failed: {str(e)}")

    def pause_animation(self):
        if self.animation_active and self.canvas:
            ani = getattr(self.canvas, "ani", None)
            if ani and hasattr(ani, "event_source") and ani.event_source:
                ani.event_source.stop()
                self.pause_button.setVisible(False)
                self.resume_button.setVisible(True)
        self.animation_active = False

    def resume_animation(self):
        if not self.canvas:
            return
        ani = getattr(self.canvas, "ani", None)
        if ani and hasattr(ani, "event_source"):
            ani.event_source.start()
            self.animation_active = True
            self.resume_button.setVisible(False)
            self.pause_button.setVisible(True)
        else:
            QMessageBox.warning(self, "Warning", "No active animation to resume.")

    def hide_animation_controls(self, hide=True):
        """Show or hide the animation control buttons and canvas."""
        self.pause_button.setVisible(not hide)
        self.resume_button.setVisible(not hide)
        self.clear_button.setVisible(not hide)

        if self.canvas:
            self.canvas.setVisible(not hide)

    def clear_animation(self):

        if not self.canvas:
            return

        if hasattr(self.canvas, "ani") and self.canvas.ani:
            self.canvas.ani.event_source.stop()
            self.canvas.ani = None

        self.layout.removeWidget(self.canvas)
        self.canvas.setParent(None)
        self.canvas.deleteLater()
        self.canvas = None

        self.hide_animation_controls(True)
        self.animation_active = False

